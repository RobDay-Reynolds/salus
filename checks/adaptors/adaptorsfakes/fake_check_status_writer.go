// This file was generated by counterfeiter
package adaptorsfakes

import (
	"sync"

	"github.com/monkeyherder/salus/checks/adaptors"
)

type FakeCheckStatusWriter struct {
	WriteStub        func(summary adaptors.Status) error
	writeMutex       sync.RWMutex
	writeArgsForCall []struct {
		summary adaptors.Status
	}
	writeReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCheckStatusWriter) Write(summary adaptors.Status) error {
	fake.writeMutex.Lock()
	fake.writeArgsForCall = append(fake.writeArgsForCall, struct {
		summary adaptors.Status
	}{summary})
	fake.recordInvocation("Write", []interface{}{summary})
	fake.writeMutex.Unlock()
	if fake.WriteStub != nil {
		return fake.WriteStub(summary)
	} else {
		return fake.writeReturns.result1
	}
}

func (fake *FakeCheckStatusWriter) WriteCallCount() int {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return len(fake.writeArgsForCall)
}

func (fake *FakeCheckStatusWriter) WriteArgsForCall(i int) adaptors.Status {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return fake.writeArgsForCall[i].summary
}

func (fake *FakeCheckStatusWriter) WriteReturns(result1 error) {
	fake.WriteStub = nil
	fake.writeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCheckStatusWriter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCheckStatusWriter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ adaptors.CheckStatusWriter = new(FakeCheckStatusWriter)
