// This file was generated by counterfeiter
package checksfakes

import (
	"sync"

	"github.com/monkeyherder/salus/checks"
)

type FakeCheck struct {
	RunStub        func() (checks.CheckInfo, error)
	runMutex       sync.RWMutex
	runArgsForCall []struct{}
	runReturns     struct {
		result1 checks.CheckInfo
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCheck) Run() (checks.CheckInfo, error) {
	fake.runMutex.Lock()
	fake.runArgsForCall = append(fake.runArgsForCall, struct{}{})
	fake.recordInvocation("Run", []interface{}{})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		return fake.RunStub()
	} else {
		return fake.runReturns.result1, fake.runReturns.result2
	}
}

func (fake *FakeCheck) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeCheck) RunReturns(result1 checks.CheckInfo, result2 error) {
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 checks.CheckInfo
		result2 error
	}{result1, result2}
}

func (fake *FakeCheck) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCheck) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ checks.Check = new(FakeCheck)
