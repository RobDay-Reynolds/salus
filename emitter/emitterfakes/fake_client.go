// This file was generated by counterfeiter
package emitterfakes

import (
	"sync"

	"github.com/monkeyherder/salus/emitter"
)

type FakeClient struct {
	PublishStub        func(subject string, bytes []byte) error
	publishMutex       sync.RWMutex
	publishArgsForCall []struct {
		subject string
		bytes   []byte
	}
	publishReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) Publish(subject string, bytes []byte) error {
	var bytesCopy []byte
	if bytes != nil {
		bytesCopy = make([]byte, len(bytes))
		copy(bytesCopy, bytes)
	}
	fake.publishMutex.Lock()
	fake.publishArgsForCall = append(fake.publishArgsForCall, struct {
		subject string
		bytes   []byte
	}{subject, bytesCopy})
	fake.recordInvocation("Publish", []interface{}{subject, bytesCopy})
	fake.publishMutex.Unlock()
	if fake.PublishStub != nil {
		return fake.PublishStub(subject, bytes)
	} else {
		return fake.publishReturns.result1
	}
}

func (fake *FakeClient) PublishCallCount() int {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	return len(fake.publishArgsForCall)
}

func (fake *FakeClient) PublishArgsForCall(i int) (string, []byte) {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	return fake.publishArgsForCall[i].subject, fake.publishArgsForCall[i].bytes
}

func (fake *FakeClient) PublishReturns(result1 error) {
	fake.PublishStub = nil
	fake.publishReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ emitter.Client = new(FakeClient)
